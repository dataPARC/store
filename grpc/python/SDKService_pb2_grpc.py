# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import SDKService_pb2 as SDKService__pb2
import SDKTypes_pb2 as SDKTypes__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in SDKService_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class SDKServiceStub(object):
    """For reading and writing configurations and data.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetHistorianPathConfigs = channel.unary_unary(
                '/SDKService/GetHistorianPathConfigs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=SDKTypes__pb2.HistorianPathConfigList.FromString,
                _registered_method=True)
        self.GetInterfaceGroups = channel.unary_unary(
                '/SDKService/GetInterfaceGroups',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=SDKTypes__pb2.InterfaceGroupConfigList.FromString,
                _registered_method=True)
        self.GetInterfaces = channel.unary_unary(
                '/SDKService/GetInterfaces',
                request_serializer=SDKService__pb2.GetInterfacesParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.InterfaceConfigList.FromString,
                _registered_method=True)
        self.GetInterface = channel.unary_unary(
                '/SDKService/GetInterface',
                request_serializer=SDKService__pb2.GetInterfaceParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadInterfaceResult.FromString,
                _registered_method=True)
        self.GetInterfaceSets = channel.unary_unary(
                '/SDKService/GetInterfaceSets',
                request_serializer=SDKService__pb2.GetInterfaceSetsParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadInterfaceSetListResult.FromString,
                _registered_method=True)
        self.GetInterfaceSet = channel.unary_unary(
                '/SDKService/GetInterfaceSet',
                request_serializer=SDKService__pb2.GetInterfaceSetParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadInterfaceSetResult.FromString,
                _registered_method=True)
        self.GetTag = channel.unary_unary(
                '/SDKService/GetTag',
                request_serializer=SDKService__pb2.GetTagParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadTagResult.FromString,
                _registered_method=True)
        self.GetTagsByInterface = channel.unary_unary(
                '/SDKService/GetTagsByInterface',
                request_serializer=SDKTypes__pb2.InterfaceConfig.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadTagListResult.FromString,
                _registered_method=True)
        self.GetTagsByInterfaceSet = channel.unary_unary(
                '/SDKService/GetTagsByInterfaceSet',
                request_serializer=SDKTypes__pb2.InterfaceSetConfig.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadTagListResult.FromString,
                _registered_method=True)
        self.WriteHistorianPathConfig = channel.unary_unary(
                '/SDKService/WriteHistorianPathConfig',
                request_serializer=SDKTypes__pb2.HistorianPathConfig.SerializeToString,
                response_deserializer=SDKTypes__pb2.HistorianPathConfig.FromString,
                _registered_method=True)
        self.WriteInterfaceGroupConfig = channel.unary_unary(
                '/SDKService/WriteInterfaceGroupConfig',
                request_serializer=SDKTypes__pb2.InterfaceGroupConfig.SerializeToString,
                response_deserializer=SDKTypes__pb2.InterfaceGroupConfig.FromString,
                _registered_method=True)
        self.WriteInterface = channel.unary_unary(
                '/SDKService/WriteInterface',
                request_serializer=SDKTypes__pb2.InterfaceConfig.SerializeToString,
                response_deserializer=SDKTypes__pb2.InterfaceConfig.FromString,
                _registered_method=True)
        self.WriteTag = channel.unary_unary(
                '/SDKService/WriteTag',
                request_serializer=SDKTypes__pb2.TagConfig.SerializeToString,
                response_deserializer=SDKTypes__pb2.TagConfig.FromString,
                _registered_method=True)
        self.WriteTags = channel.stream_stream(
                '/SDKService/WriteTags',
                request_serializer=SDKTypes__pb2.TagConfig.SerializeToString,
                response_deserializer=SDKTypes__pb2.TagConfig.FromString,
                _registered_method=True)
        self.ReadCurrentValuesStream = channel.unary_stream(
                '/SDKService/ReadCurrentValuesStream',
                request_serializer=SDKService__pb2.ReadCurrentValuesParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.TagCurrentValues.FromString,
                _registered_method=True)
        self.ReadCurrentValues = channel.unary_unary(
                '/SDKService/ReadCurrentValues',
                request_serializer=SDKService__pb2.ReadCurrentValuesParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.TagCurrentValues.FromString,
                _registered_method=True)
        self.ReadAtTime = channel.unary_unary(
                '/SDKService/ReadAtTime',
                request_serializer=SDKService__pb2.ReadAtTimeParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadAtTimeResult.FromString,
                _registered_method=True)
        self.ReadRawCount = channel.unary_unary(
                '/SDKService/ReadRawCount',
                request_serializer=SDKService__pb2.ReadRawParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadCountResult.FromString,
                _registered_method=True)
        self.StreamRawData = channel.unary_stream(
                '/SDKService/StreamRawData',
                request_serializer=SDKService__pb2.StreamRawParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamRawMessage.FromString,
                _registered_method=True)
        self.StreamRawBulkData = channel.stream_stream(
                '/SDKService/StreamRawBulkData',
                request_serializer=SDKService__pb2.StreamRawParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamRawMessage.FromString,
                _registered_method=True)
        self.DirectionalStreamRawData = channel.unary_stream(
                '/SDKService/DirectionalStreamRawData',
                request_serializer=SDKService__pb2.DirectionalStreamRawParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamRawMessage.FromString,
                _registered_method=True)
        self.ReadProcessedCount = channel.unary_unary(
                '/SDKService/ReadProcessedCount',
                request_serializer=SDKService__pb2.ReadProcessedParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadCountResult.FromString,
                _registered_method=True)
        self.StreamProcessedData = channel.unary_stream(
                '/SDKService/StreamProcessedData',
                request_serializer=SDKService__pb2.StreamProcessedParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamProcessedMessage.FromString,
                _registered_method=True)
        self.StreamProcessedBulkData = channel.stream_stream(
                '/SDKService/StreamProcessedBulkData',
                request_serializer=SDKService__pb2.StreamProcessedParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamProcessedMessage.FromString,
                _registered_method=True)
        self.DirectionalStreamProcessedData = channel.unary_stream(
                '/SDKService/DirectionalStreamProcessedData',
                request_serializer=SDKService__pb2.DirectionalStreamProcessedParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamProcessedMessage.FromString,
                _registered_method=True)
        self.ReadProcessedByConfigCount = channel.unary_unary(
                '/SDKService/ReadProcessedByConfigCount',
                request_serializer=SDKService__pb2.ReadProcessedByConfigParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.ReadCountResult.FromString,
                _registered_method=True)
        self.StreamProcessedDataByConfig = channel.unary_stream(
                '/SDKService/StreamProcessedDataByConfig',
                request_serializer=SDKService__pb2.StreamProcessedByConfigParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamProcessedMessage.FromString,
                _registered_method=True)
        self.StreamProcessedBulkDataByConfig = channel.stream_stream(
                '/SDKService/StreamProcessedBulkDataByConfig',
                request_serializer=SDKService__pb2.StreamProcessedByConfigParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamProcessedMessage.FromString,
                _registered_method=True)
        self.DirectionalStreamProcessedDataByConfig = channel.unary_stream(
                '/SDKService/DirectionalStreamProcessedDataByConfig',
                request_serializer=SDKService__pb2.DirectionalStreamProcessedByConfigParameters.SerializeToString,
                response_deserializer=SDKTypes__pb2.StreamProcessedMessage.FromString,
                _registered_method=True)
        self.WriteDataBulk = channel.unary_unary(
                '/SDKService/WriteDataBulk',
                request_serializer=SDKTypes__pb2.TagDataToHistorizeList.SerializeToString,
                response_deserializer=SDKTypes__pb2.WriteResult.FromString,
                _registered_method=True)
        self.GetHealthReport = channel.unary_unary(
                '/SDKService/GetHealthReport',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=SDKTypes__pb2.HealthReportResult.FromString,
                _registered_method=True)


class SDKServiceServicer(object):
    """For reading and writing configurations and data.
    """

    def GetHistorianPathConfigs(self, request, context):
        """Get all historian paths.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInterfaceGroups(self, request, context):
        """Get all interface groups.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInterfaces(self, request, context):
        """Get all interfaces for an interface group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInterface(self, request, context):
        """Get a single interface.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInterfaceSets(self, request, context):
        """Get all interface sets for an interface group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInterfaceSet(self, request, context):
        """Get a single interface set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTag(self, request, context):
        """Get a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTagsByInterface(self, request, context):
        """Get all tags for an interface.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTagsByInterfaceSet(self, request, context):
        """Get all tags for an interface set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteHistorianPathConfig(self, request, context):
        """Create or update a historian path.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteInterfaceGroupConfig(self, request, context):
        """Create or update an interface group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteInterface(self, request, context):
        """Create or update an interface.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteTag(self, request, context):
        """Create or update a tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteTags(self, request_iterator, context):
        """Create or update a stream of tags.
        Note: Always use a separate thread to receive response.
        If you don't read the server responses, then this method can deadlock.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadCurrentValuesStream(self, request, context):
        """Stream current values for a collection of tags.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadCurrentValues(self, request, context):
        """Read current values for a collection of tags.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAtTime(self, request, context):
        """Read raw datapoints at specific timestamps for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRawCount(self, request, context):
        """Read a count of raw datapoints for a given time period for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRawData(self, request, context):
        """Stream raw datapoints for a given time period for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRawBulkData(self, request_iterator, context):
        """Stream raw datapoints for given time periods for a collection of tags.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DirectionalStreamRawData(self, request, context):
        """Stream a specified number of raw datapoints either forwards or backwards in time from a starting timestamp for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadProcessedCount(self, request, context):
        """Read a count of aggregated datapoints for a given time period for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamProcessedData(self, request, context):
        """Stream aggregated datapoints for a given time period for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamProcessedBulkData(self, request_iterator, context):
        """Stream aggregated datapoints for given time periods for a collection of tags.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DirectionalStreamProcessedData(self, request, context):
        """Stream a specified number of aggregated datapoints either forwards or backwards in time from a starting timestamp for
        a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadProcessedByConfigCount(self, request, context):
        """Read a count of aggregated datapoints for a preconfigured aggregate and a given time period for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamProcessedDataByConfig(self, request, context):
        """Stream aggregated datapoints for a preconfigured aggregate and a given time period for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamProcessedBulkDataByConfig(self, request_iterator, context):
        """Stream aggregated datapoints for preconfigured aggregates and given time periods for a collection of tags.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DirectionalStreamProcessedDataByConfig(self, request, context):
        """Stream a specified number of aggregated datapoints either forwards or backwards in time from a starting timestamp and a
        preconfigured aggregate for a single tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteDataBulk(self, request, context):
        """Write a collection of datapoints to history.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHealthReport(self, request, context):
        """Get a health report from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SDKServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetHistorianPathConfigs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistorianPathConfigs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=SDKTypes__pb2.HistorianPathConfigList.SerializeToString,
            ),
            'GetInterfaceGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInterfaceGroups,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=SDKTypes__pb2.InterfaceGroupConfigList.SerializeToString,
            ),
            'GetInterfaces': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInterfaces,
                    request_deserializer=SDKService__pb2.GetInterfacesParameters.FromString,
                    response_serializer=SDKTypes__pb2.InterfaceConfigList.SerializeToString,
            ),
            'GetInterface': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInterface,
                    request_deserializer=SDKService__pb2.GetInterfaceParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadInterfaceResult.SerializeToString,
            ),
            'GetInterfaceSets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInterfaceSets,
                    request_deserializer=SDKService__pb2.GetInterfaceSetsParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadInterfaceSetListResult.SerializeToString,
            ),
            'GetInterfaceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInterfaceSet,
                    request_deserializer=SDKService__pb2.GetInterfaceSetParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadInterfaceSetResult.SerializeToString,
            ),
            'GetTag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTag,
                    request_deserializer=SDKService__pb2.GetTagParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadTagResult.SerializeToString,
            ),
            'GetTagsByInterface': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTagsByInterface,
                    request_deserializer=SDKTypes__pb2.InterfaceConfig.FromString,
                    response_serializer=SDKTypes__pb2.ReadTagListResult.SerializeToString,
            ),
            'GetTagsByInterfaceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTagsByInterfaceSet,
                    request_deserializer=SDKTypes__pb2.InterfaceSetConfig.FromString,
                    response_serializer=SDKTypes__pb2.ReadTagListResult.SerializeToString,
            ),
            'WriteHistorianPathConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteHistorianPathConfig,
                    request_deserializer=SDKTypes__pb2.HistorianPathConfig.FromString,
                    response_serializer=SDKTypes__pb2.HistorianPathConfig.SerializeToString,
            ),
            'WriteInterfaceGroupConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteInterfaceGroupConfig,
                    request_deserializer=SDKTypes__pb2.InterfaceGroupConfig.FromString,
                    response_serializer=SDKTypes__pb2.InterfaceGroupConfig.SerializeToString,
            ),
            'WriteInterface': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteInterface,
                    request_deserializer=SDKTypes__pb2.InterfaceConfig.FromString,
                    response_serializer=SDKTypes__pb2.InterfaceConfig.SerializeToString,
            ),
            'WriteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteTag,
                    request_deserializer=SDKTypes__pb2.TagConfig.FromString,
                    response_serializer=SDKTypes__pb2.TagConfig.SerializeToString,
            ),
            'WriteTags': grpc.stream_stream_rpc_method_handler(
                    servicer.WriteTags,
                    request_deserializer=SDKTypes__pb2.TagConfig.FromString,
                    response_serializer=SDKTypes__pb2.TagConfig.SerializeToString,
            ),
            'ReadCurrentValuesStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadCurrentValuesStream,
                    request_deserializer=SDKService__pb2.ReadCurrentValuesParameters.FromString,
                    response_serializer=SDKTypes__pb2.TagCurrentValues.SerializeToString,
            ),
            'ReadCurrentValues': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadCurrentValues,
                    request_deserializer=SDKService__pb2.ReadCurrentValuesParameters.FromString,
                    response_serializer=SDKTypes__pb2.TagCurrentValues.SerializeToString,
            ),
            'ReadAtTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAtTime,
                    request_deserializer=SDKService__pb2.ReadAtTimeParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadAtTimeResult.SerializeToString,
            ),
            'ReadRawCount': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRawCount,
                    request_deserializer=SDKService__pb2.ReadRawParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadCountResult.SerializeToString,
            ),
            'StreamRawData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamRawData,
                    request_deserializer=SDKService__pb2.StreamRawParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamRawMessage.SerializeToString,
            ),
            'StreamRawBulkData': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamRawBulkData,
                    request_deserializer=SDKService__pb2.StreamRawParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamRawMessage.SerializeToString,
            ),
            'DirectionalStreamRawData': grpc.unary_stream_rpc_method_handler(
                    servicer.DirectionalStreamRawData,
                    request_deserializer=SDKService__pb2.DirectionalStreamRawParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamRawMessage.SerializeToString,
            ),
            'ReadProcessedCount': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadProcessedCount,
                    request_deserializer=SDKService__pb2.ReadProcessedParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadCountResult.SerializeToString,
            ),
            'StreamProcessedData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamProcessedData,
                    request_deserializer=SDKService__pb2.StreamProcessedParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamProcessedMessage.SerializeToString,
            ),
            'StreamProcessedBulkData': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamProcessedBulkData,
                    request_deserializer=SDKService__pb2.StreamProcessedParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamProcessedMessage.SerializeToString,
            ),
            'DirectionalStreamProcessedData': grpc.unary_stream_rpc_method_handler(
                    servicer.DirectionalStreamProcessedData,
                    request_deserializer=SDKService__pb2.DirectionalStreamProcessedParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamProcessedMessage.SerializeToString,
            ),
            'ReadProcessedByConfigCount': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadProcessedByConfigCount,
                    request_deserializer=SDKService__pb2.ReadProcessedByConfigParameters.FromString,
                    response_serializer=SDKTypes__pb2.ReadCountResult.SerializeToString,
            ),
            'StreamProcessedDataByConfig': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamProcessedDataByConfig,
                    request_deserializer=SDKService__pb2.StreamProcessedByConfigParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamProcessedMessage.SerializeToString,
            ),
            'StreamProcessedBulkDataByConfig': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamProcessedBulkDataByConfig,
                    request_deserializer=SDKService__pb2.StreamProcessedByConfigParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamProcessedMessage.SerializeToString,
            ),
            'DirectionalStreamProcessedDataByConfig': grpc.unary_stream_rpc_method_handler(
                    servicer.DirectionalStreamProcessedDataByConfig,
                    request_deserializer=SDKService__pb2.DirectionalStreamProcessedByConfigParameters.FromString,
                    response_serializer=SDKTypes__pb2.StreamProcessedMessage.SerializeToString,
            ),
            'WriteDataBulk': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteDataBulk,
                    request_deserializer=SDKTypes__pb2.TagDataToHistorizeList.FromString,
                    response_serializer=SDKTypes__pb2.WriteResult.SerializeToString,
            ),
            'GetHealthReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHealthReport,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=SDKTypes__pb2.HealthReportResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SDKService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('SDKService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SDKService(object):
    """For reading and writing configurations and data.
    """

    @staticmethod
    def GetHistorianPathConfigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetHistorianPathConfigs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            SDKTypes__pb2.HistorianPathConfigList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInterfaceGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetInterfaceGroups',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            SDKTypes__pb2.InterfaceGroupConfigList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInterfaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetInterfaces',
            SDKService__pb2.GetInterfacesParameters.SerializeToString,
            SDKTypes__pb2.InterfaceConfigList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInterface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetInterface',
            SDKService__pb2.GetInterfaceParameters.SerializeToString,
            SDKTypes__pb2.ReadInterfaceResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInterfaceSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetInterfaceSets',
            SDKService__pb2.GetInterfaceSetsParameters.SerializeToString,
            SDKTypes__pb2.ReadInterfaceSetListResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInterfaceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetInterfaceSet',
            SDKService__pb2.GetInterfaceSetParameters.SerializeToString,
            SDKTypes__pb2.ReadInterfaceSetResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetTag',
            SDKService__pb2.GetTagParameters.SerializeToString,
            SDKTypes__pb2.ReadTagResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTagsByInterface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetTagsByInterface',
            SDKTypes__pb2.InterfaceConfig.SerializeToString,
            SDKTypes__pb2.ReadTagListResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTagsByInterfaceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetTagsByInterfaceSet',
            SDKTypes__pb2.InterfaceSetConfig.SerializeToString,
            SDKTypes__pb2.ReadTagListResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteHistorianPathConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/WriteHistorianPathConfig',
            SDKTypes__pb2.HistorianPathConfig.SerializeToString,
            SDKTypes__pb2.HistorianPathConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteInterfaceGroupConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/WriteInterfaceGroupConfig',
            SDKTypes__pb2.InterfaceGroupConfig.SerializeToString,
            SDKTypes__pb2.InterfaceGroupConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteInterface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/WriteInterface',
            SDKTypes__pb2.InterfaceConfig.SerializeToString,
            SDKTypes__pb2.InterfaceConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/WriteTag',
            SDKTypes__pb2.TagConfig.SerializeToString,
            SDKTypes__pb2.TagConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteTags(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/SDKService/WriteTags',
            SDKTypes__pb2.TagConfig.SerializeToString,
            SDKTypes__pb2.TagConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadCurrentValuesStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SDKService/ReadCurrentValuesStream',
            SDKService__pb2.ReadCurrentValuesParameters.SerializeToString,
            SDKTypes__pb2.TagCurrentValues.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadCurrentValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/ReadCurrentValues',
            SDKService__pb2.ReadCurrentValuesParameters.SerializeToString,
            SDKTypes__pb2.TagCurrentValues.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadAtTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/ReadAtTime',
            SDKService__pb2.ReadAtTimeParameters.SerializeToString,
            SDKTypes__pb2.ReadAtTimeResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadRawCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/ReadRawCount',
            SDKService__pb2.ReadRawParameters.SerializeToString,
            SDKTypes__pb2.ReadCountResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamRawData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SDKService/StreamRawData',
            SDKService__pb2.StreamRawParameters.SerializeToString,
            SDKTypes__pb2.StreamRawMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamRawBulkData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/SDKService/StreamRawBulkData',
            SDKService__pb2.StreamRawParameters.SerializeToString,
            SDKTypes__pb2.StreamRawMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DirectionalStreamRawData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SDKService/DirectionalStreamRawData',
            SDKService__pb2.DirectionalStreamRawParameters.SerializeToString,
            SDKTypes__pb2.StreamRawMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadProcessedCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/ReadProcessedCount',
            SDKService__pb2.ReadProcessedParameters.SerializeToString,
            SDKTypes__pb2.ReadCountResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamProcessedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SDKService/StreamProcessedData',
            SDKService__pb2.StreamProcessedParameters.SerializeToString,
            SDKTypes__pb2.StreamProcessedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamProcessedBulkData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/SDKService/StreamProcessedBulkData',
            SDKService__pb2.StreamProcessedParameters.SerializeToString,
            SDKTypes__pb2.StreamProcessedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DirectionalStreamProcessedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SDKService/DirectionalStreamProcessedData',
            SDKService__pb2.DirectionalStreamProcessedParameters.SerializeToString,
            SDKTypes__pb2.StreamProcessedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadProcessedByConfigCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/ReadProcessedByConfigCount',
            SDKService__pb2.ReadProcessedByConfigParameters.SerializeToString,
            SDKTypes__pb2.ReadCountResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamProcessedDataByConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SDKService/StreamProcessedDataByConfig',
            SDKService__pb2.StreamProcessedByConfigParameters.SerializeToString,
            SDKTypes__pb2.StreamProcessedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamProcessedBulkDataByConfig(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/SDKService/StreamProcessedBulkDataByConfig',
            SDKService__pb2.StreamProcessedByConfigParameters.SerializeToString,
            SDKTypes__pb2.StreamProcessedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DirectionalStreamProcessedDataByConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SDKService/DirectionalStreamProcessedDataByConfig',
            SDKService__pb2.DirectionalStreamProcessedByConfigParameters.SerializeToString,
            SDKTypes__pb2.StreamProcessedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteDataBulk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/WriteDataBulk',
            SDKTypes__pb2.TagDataToHistorizeList.SerializeToString,
            SDKTypes__pb2.WriteResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHealthReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SDKService/GetHealthReport',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            SDKTypes__pb2.HealthReportResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
